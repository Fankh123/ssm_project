学习了aop，aop我认为主要是通过动态代理，给spring的每个执行方法，也就是Joinpoint提供一个代理服务，通过Pointcut作为模式匹配，
去匹配连接点，也就是方法，然后通过advice进行一个处理，也就是对方法进行一个附加的处理。
而一般的java中的动态代理是针对类层级的，如果是通过JDK的Proxy实现，需要这个目标类实现了一个接口，然后就可以让代理对象同样实现这个接口，
从而实现对目标类的替换（代理），通过 InvocationHandler 接口，可以拦截目标类的方法调用，添加自定义逻辑。